// 메인 Sass : main.scss

// 사스 주석문
// 주석1
/* 주석2 */

/********************************************* 
    [ 사스 핵심 사용법 ]

    1. 사스 확장자별 파일구분
        (1) .scss - 사스관리파일
            (-> .sass 확장자는 중괄호,세미콜론 사용하지않는
            문법 사스파일임. 우리는 scss파일을 사용할 것임)
        (2) .css.map - 사스파일과 CSS연결정보 파일
        (3) .css - 실제로 적용되는 컴파일된 CSS

    2. 사스파일 컴파일하기
        ->Live Sass Compiler 확장프로그램 설치후
        하단 "Watch Sass" 클릭하여 작동시킴

        -> 에러가 없는한!!! 컴파일하여 같은 이름의
        css파일을 생성함 "Watching..."상태가됨.
        다시클릭시 실시간 변환상태가 꺼진다.

        -> 에러 발생시 컴파일이 안되고 cmd창에
        에러메시지가 나온다!

    3. 주요 문법
    (1) 네스팅 기법 
        - 선택자 중괄호안에 다른 하위선택을 하는것!
        예) div{h1{color:red;}}
        -> 장점: 같은 셋팅요소를 선택시 중복된
        선택자의 반복을 하지 않아도 된다!
        또한 같은 구성요소를 묶어서 셋팅 관리가능!

    (2) 속성접두어 묶음기법
        - 반복되는 같은 종류의 하위속성의 접두어를
        한번만 사용하여 셋팅을 묶어주는 방법
        예) font: {size:12px; weight:bold;}

    (3) 변수사용기법
        - 동일하게 사용할 값을 변수에 넣고 디자인을 배치함
        - 변수사용법-> $변수명: 값
        - 변수명은 모두 붙여쓰며 구분단어는
        캐믈케이스(camelCase) 또는 
        캐밥케이스(camel-case)를 사용한다
        - 변수의 범위는 변수를 선언후 하위로 상속되어 값이유지됨

    (4) 파일 분리기법 : @import
        - 부분파일을 분리하여 공통모듈로 합쳐서 사용한다!
        - 부분파일명은 사스에서 앞에 언더바를 붙여서 사용하는것이
        원칙이지만 언더바를 안써도 기본적으로 부분파일처리해줌!
        - 파일호출시 확장자 생략가능함! 
        (자동으로 앞에 언더바와 확장자를 생략해준다!)
        예) @import "reset";
        - 일반 CSS @import 와는 다른점은 http요청을 하지 않음

    (5) 믹스인 : 일종의 공통 CSS코드를 리턴하는 함수
        1) 셋팅형식

        [1] 전달변수가 없는 믹스인
        @mixin 믹스인이름 {CSS코드}

        [2] 전달변수가 있는 믹스인
        @mixin 믹스인이름(변수) {CSS코드}

        [3] 전달변수가 있고 기본값도 있는 믹스인
        @mixin 믹스인이름(변수:기본값) {CSS코드}

        2) 믹스인 호출방법 : 믹스인을 포함하라!(@include)
        -> @include 믹스인이름;
        -> @include 믹스인이름(전달값);

    (6) 네스팅 이어붙이기 기법(&)
        - 가상요소, 가상클래스, 특정클래스를
            현재 선택요소에 셋팅하는 방법임!
        - &(앰퍼센드)는 현재 선택요소 자신을 가리킴!
 
    (7) 반복코드 확장 : @extend (extend는 연장하다,확장하다)
        1) 사용이유 : 반복되는 같은 셋팅의 클래스를 쉽게 도입한다
        2) 사용방법 : 선택자 코드 안에 (@extend 클래스명) 형식
        3) 공통코드 외에 다른 셋팅속성은 하단에 추가로 구현한다!
        4) 장점 : 공통코드 적용을 위해 각 요소에 클래스를 일일히
        주지 않아도 공통코드를 적용할 수 있다!



*********************************************/

// 외부변수셋팅 sass불러오기
@import "./data/variables";

// 초기화 셋팅 sass불러오기
@import "./common/reset";

// @mixin 셋팅하기 ////////
// (1) 타이틀 디자인 믹스인

// [1]전달해서 변경할 값이 없다면 전달변수없는 믹스인 만들기
// @mixin title-text{

// [2]글자색을 전달해서 변경해야 하므로 전달변수를 만들어준다!
// 변수는 $변수명으로 만들고 지역변수로 사용된다!
// @mixin title-text($selColor){ // $selColor 글자색 전달변수

// [3]전달값을 보내지 않아도 에러나지 않도록 기본값 지정하기
@mixin title-text($selColor: red) {
  // $selColor 글자색 전달변수
  // 글자색
  color: $selColor;
  // 하단 마진
  margin-bottom: $fontSize1;
  // 폰트 설정모음
  font: {
    size: 40px;
    family: "Times New Roman";
  }
  // 텍스트 설정모음
  text: {
    align: center;
    decoration: underline;
    underline-offset: 10px;
    shadow: 5px 5px 4px #00000077;
  }
}

// (2) 박스 테두리 믹스인
@mixin box-border($bdColor: blue) {
  border: {
    color: $bdColor;
    style: dashed;
    width: 7px;
  }
}

// 전체 페이지 요소
.wrapper {
  max-width: 1000px;
  margin: 0 auto;
}

/* 상단영역 */
.top-area {
  color: $mainColor1;
  // 네스팅기법
  h1 {
    // 타이틀 텍스트 믹스인 호출하기
    @include title-text($fontColor1);

    // font와 text를 믹스인으로 만든다!(재사용!)
    // color: $fontColor1;

    // 속성접두어 묶음기법
    // font: {
    //     size: 40px;
    //     family: "Times New Roman";
    // }

    // text: {
    //     align: center;
    //     decoration: underline;
    //     underline-offset: 10px;
    //     shadow: 5px 5px 4px #00000077;
    // }

    background: {
      color: $mainColor1-2;
      image: url(../images/flower.png);
      size: 70px;
      position: center;
      repeat: repeat-x;
    }

    padding: 20px;
  }

  /* 서브 타이틀 박스 */
  h2 {
    @extend .box-basic;
    font-size: $fontSize3;
  }
}

/* 메인영역 */
.main-area {
  // 내부박스 section
  section {
    // 박스 테두리 믹스인 호출
    @include box-border(pink);
    margin-bottom: 20px;
    padding: 20px;
  }
  // 메인 영역 타이틀 믹스인 호출!
  h3 {
    @include title-text(darkblue);
  }
  // 리스트, 문단 디자인
  ul,
  ol,
  p {
    line-height: 2;
    font-size: 24px;
    // 하위 li요소
    li {
      text: {
        decoration: underline;
        underline-offset: 10px;
        decoration-thickness: 5px;
        decoration-color: $mainColor2;
        align: center;
      }
      background-color: #ff0;
      // 네스팅 이어붙이기 기법(&)
      // 첫번째 li 강조하기
      &:first-child {
        color: orchid;
        font-weight: bold;
        font-size: $fontSize3;
        text-shadow: 1px 0 #000, -1px 0 #000, 0 1px #000, 0 -1px #000;
      }
      /* 가상요소 블릿넣기 */
      &::before {
        content: "😋";
      }
    }
  }
}

// 버튼 기본디자인 클래스 ///
.button-basic {
  display: inline-block;
  border: 1px solid #222;
  border-radius: 20px;
  padding: 15px 30px;
  font-size: 20px;
  cursor: pointer;
  margin-left: 20px;

  // 마우스 오버시 셋팅하기
  &:hover {
    background-color: hotpink;
    text: {
        decoration: overline;
        decoration-style: wavy;
    }    
  }
  // 클래스가 "my"인 경우 디자인변경
  &.my {
    text: {
        decoration: underline;
        decoration-style: dotted;
        underline-offset: 10px;
        decoration-thickness: 5px;
    }
  }

}


// 위의 기본 디자인 클래스를
// 특정클래스에 그대로 가져오기 싶을때
// @extend 클래스명

// 제출하기 버튼에 기본버튼 디자인 입히기
.button-report {
  // 기본 버튼 클래스 가져오기
  @extend .button-basic;
  // 다른 디자인요소는 추가로 구현
  background-color: orange;
  color: #fff;
}

// 기본박스 디자인을 입혀서 버튼박스를 셋팅
.button-box {
  // 기본박스 디자인 가져오기
  @extend .box-basic;
  // 추가디자인은 아래에 코딩
  background-image: linear-gradient(to bottom, lightgreen, transparent);
}

// 일반 박스기본 //////
.box-basic {
  text-align: center;
  padding: 20px 0;
}
/* 하단 타이틀 */
.bottom-title {
  // 기본박스 디자인 적용하기
  @extend .box-basic;
  @include title-text;
}
