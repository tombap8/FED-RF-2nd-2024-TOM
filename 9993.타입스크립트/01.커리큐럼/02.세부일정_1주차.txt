# 리액트와 타입스크립트 초심자 교육 강의 안 - 1주차

## 주차별 계획

### 1주차

#### Day 1: TypeScript 기초

1. **오리엔테이션 및 학습 목표 설정 (1시간)**
   - **0:00 - 0:10**: 강의 목표 소개
     - 강의 목표 설명
     - 교육 과정에서 다룰 주제 소개
   - **0:10 - 0:20**: 커리큘럼 개요 설명
     - 주별 학습 내용 설명
     - 일별 학습 계획 소개
   - **0:20 - 0:30**: 학습 방법 및 일정 안내
     - 학습 방법 소개 (강의, 실습, Q&A)
     - 일정 안내 및 주요 마일스톤 설명
   - **0:30 - 1:00**: Q&A 세션
     - 학습자들의 질문에 답변
     - 학습 목표 및 일정에 대한 추가 설명

2. **TypeScript 기본 개념 소개 (1시간)**
   - **1:00 - 1:15**: 기본 타입 소개
     - number, string, boolean, array, tuple, enum
   - **1:15 - 1:30**: 인터페이스와 유니온 타입
     - 인터페이스 정의 및 사용법
     - 유니온 타입의 개념과 사용 예제
   - **1:30 - 2:00**: 실습: 간단한 타입 정의 연습
     - 실습 환경 설정
     - 기본 타입과 인터페이스 정의 연습
     - 유니온 타입 연습 문제

3. **TypeScript 환경 설정 및 설치 (1시간)**
   - **2:00 - 2:15**: Node.js와 TypeScript 설치
     - Node.js 설치 방법
     - TypeScript 설치 방법 (npm 사용)
   - **2:15 - 2:30**: tsconfig.json 설정
     - tsconfig.json 파일 생성 및 기본 설정
     - 주요 설정 옵션 설명
   - **2:30 - 3:00**: TypeScript 컴파일러 사용법
     - tsc 명령어 사용법
     - 컴파일 및 실행 방법
   - **3:00 - 4:00**: 실습: 간단한 TypeScript 프로젝트 생성
     - 프로젝트 폴더 생성
     - tsconfig.json 파일 설정
     - 간단한 TypeScript 파일 작성 및 컴파일

4. **간단한 TypeScript 프로젝트 시작하기 (1시간)**
   - **4:00 - 4:15**: 기본 프로젝트 구조 소개
     - 디렉토리 구조 설명
     - 주요 파일 및 폴더 소개
   - **4:15 - 4:30**: 코드 작성 및 컴파일
     - 간단한 코드 작성 예제
     - 코드 컴파일 및 실행
   - **4:30 - 5:00**: 디버깅 방법
     - 디버깅 도구 소개
     - 디버깅 방법 및 예제
   - **5:00 - 6:00**: 실습: 간단한 프로그램 작성 및 실행
     - 간단한 프로그램 작성
     - 코드 컴파일 및 실행
     - 디버깅 연습

#### Day 2: TypeScript 기초 심화

1. **함수와 클래스에 TypeScript 적용하기 (1시간)**
   - **0:00 - 0:15**: 함수 타입 정의
     - 함수 타입 선언 방법
     - 함수 타입 예제
   - **0:15 - 0:30**: 클래스와 인터페이스
     - 클래스 정의 방법
     - 인터페이스와 클래스의 관계
   - **0:30 - 1:00**: 접근 제어자 (public, private, protected)
     - 접근 제어자의 개념
     - 접근 제어자 사용 예제
   - **1:00 - 2:00**: 실습: 간단한 클래스와 함수 작성
     - 클래스와 함수 작성 연습
     - 접근 제어자 적용 연습

2. **타입 추론과 타입 단언 (1시간)**
   - **2:00 - 2:15**: 타입 추론의 원리
     - 타입 추론의 개념
     - 타입 추론 예제
   - **2:15 - 2:30**: 타입 단언 (Assertion)
     - 타입 단언의 개념
     - 타입 단언 사용 예제
   - **2:30 - 3:00**: 실습: 타입 추론과 단언 예제 작성
     - 타입 추론 연습 문제
     - 타입 단언 연습 문제

3. **제네릭의 기본 개념 (1시간)**
   - **3:00 - 3:15**: 제네릭 타입 소개
     - 제네릭의 개념
     - 제네릭 타입 정의 방법
   - **3:15 - 3:30**: 제네릭 함수와 클래스
     - 제네릭 함수 작성 예제
     - 제네릭 클래스 작성 예제
   - **3:30 - 4:00**: 실습: 제네릭을 활용한 코드 작성
     - 제네릭 함수 작성 연습
     - 제네릭 클래스 작성 연습

4. **실습 프로젝트에 TypeScript 적용 연습 (1시간)**
   - **4:00 - 4:15**: 실습 프로젝트 설정
     - 프로젝트 구조 설정
     - TypeScript 설정 확인
   - **4:15 - 5:00**: TypeScript로 코드 작성 및 적용
     - 프로젝트 코드 작성
     - TypeScript 적용 및 컴파일
   - **5:00 - 6:00**: Q&A 및 피드백
     - 실습 결과물 리뷰
     - 질문 및 피드백 제공

#### Day 3: React와 TypeScript 연동

1. **React 프로젝트에 TypeScript 설정하기 (1시간)**
   - **0:00 - 0:15**: Create React App으로 프로젝트 생성
     - CRA로 TypeScript 프로젝트 생성 방법
   - **0:15 - 0:30**: TypeScript 설정 추가
     - tsconfig.json 설정 확인 및 추가
   - **0:30 - 1:00**: 실습: TypeScript로 React 프로젝트 생성
     - 프로젝트 생성 및 설정
     - 간단한 컴포넌트 작성

2. **React 컴포넌트에 TypeScript 적용하기 (1시간)**
   - **1:00 - 1:15**: 함수형 컴포넌트와 클래스형 컴포넌트에 타입 적용
     - 함수형 컴포넌트 타입 정의
     - 클래스형 컴포넌트 타입 정의
   - **1:15 - 1:30**: Props와 State 타입 정의
     - Props 타입 정의 방법
     - State 타입 정의 방법
   - **1:30 - 2:00**: 실습: 간단한 컴포넌트 작성
     - Props와 State를 사용하는 컴포넌트 작성

3. **React의 기본 Hook (useState, useEffect)와 TypeScript 사용법 (1시간)**
   - **2:00 - 2:15**: useState와 useEffect Hook 소개
     - useState Hook 사용법
     - useEffect Hook 사용법
   - **2:15 - 2:30**: TypeScript로 Hook 사용하기
     - useState와 useEffect에 TypeScript 적용 방법
   - **2:30 - 3:00**: 실습: Hook을 활용한 상태 관리 예제 작성
     - useState와 useEffect를 활용한 컴포넌트 작성

4. **실습 프로젝트에 React와 TypeScript 연동하기 (1시간)**
   - **3:00 - 4:00**: 실습 프로젝트에 React와 TypeScript 통합
     - 기존 프로젝트에 React와 TypeScript 통합
     - 컴포넌트 작성 및 적용
     - Q&A 및 피드백

#### Day 4: React와 TypeScript 심화

1. **컴포넌트 간의 데이터 전달 (Props와 Context API) (1시간)**
   - **0:00 - 0:15**: Props로 데이터 전달
     - Props 사용법
     - Props 타입 정의 방법
   - **0:15 - 0:30**: Context API 소개 및 사용법
     - Context API 개념 소개
     - Context API 사용 예제
   - **0:30 - 1:00**: 실습: Context API를 활용한 데이터 전달
     - Context API를 사용한 컴포넌트 작성

2. **타입 안전한 이벤트 처리 (1시간)**
   - **1:00 - 1:15**: 이벤트 타입 정의
     - 이벤트 타입 정의 방법
     - 주요 이벤트 타입
   - **1:15 - 1:30**: 이벤트 핸들러 작성
     - 이벤트 핸들러 작성 방법
     - 이벤트 핸들러 타입 정의
   - **1:30 - 2:00**: 실습: 이벤트 처리 예제 작성
     - 이벤트 핸들링 예제 작성

3. **리액트 라우터와 TypeScript 사용법 (1시간)**
   - **2:00 - 2:15**: React Router 기본 개념
     - React Router 개념 소개
     - 주요 컴포넌트 설명
   - **2:15 - 2:30**: React Router와 TypeScript 사용법
     - React Router 설정 방법
     - TypeScript와의 통합
   - **2:30 - 3:00**: 실습: 라우팅 예제 작성
     - 간단한 라우팅 예제 작성
     - 컴포넌트 간의 이동 구현

4. **실습 프로젝트에 React 심화 내용 적용하기 (1시간)**
   - **3:00 - 4:00**: 실습 프로젝트에 심화 내용 적용
     - 컴포넌트 작성 및 라우팅
     - 이벤트 처리 및 Context API 적용
     - Q&A 및 피드백

#### Day 5: 상태 관리와 TypeScript

1. **상태 관리의 기본 개념 (useReducer) (1시간)**
   - **0:00 - 0:15**: useReducer Hook 소개
     - useReducer 개념 소개
     - 사용 예제 설명
   - **0:15 - 0:30**: 상태 관리 패턴
     - 상태 관리 패턴 설명
     - 주요 패턴 소개
   - **0:30 - 1:00**: 실습: useReducer를 활용한 상태 관리 예제 작성
     - useReducer를 활용한 상태 관리 구현

2. **Redux 소개 및 기본 사용법 (1시간)**
   - **1:00 - 1:15**: Redux 개념 및 구조
     - Redux 개념 설명
     - Redux 주요 구성 요소 소개
   - **1:15 - 1:30**: Redux 설정 및 기본 사용법
     - Redux 설정 방법
     - 기본 사용법 설명
   - **1:30 - 2:00**: 실습: 간단한 Redux 예제 작성
     - Redux를 활용한 간단한 상태 관리 예제 작성

3. **Redux와 TypeScript 사용법 (1시간)**
   - **2:00 - 2:15**: Redux에 TypeScript 적용하기
     - Redux와 TypeScript 통합 방법
   - **2:15 - 2:30**: 타입 정의 및 액션, 리듀서 작성
     - Redux 액션과 리듀서 타입 정의 방법
   - **2:30 - 3:00**: 실습: Redux와 TypeScript 통합 예제 작성
     - Redux와 TypeScript를 활용한 상태 관리 예제 작성

4. **실습 프로젝트에 상태 관리 적용하기 (1시간)**
   - **3:00 - 4:00**: 실습 프로젝트에 Redux 적용
     - 실습 프로젝트에 Redux 설정 및 적용
     - 상태 관리 구현
     - Q&A 및 피드백